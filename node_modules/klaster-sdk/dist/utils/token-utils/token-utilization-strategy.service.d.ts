import { TokenUtilizationStrategyItems, ChainRpcInfo, MultichainTokenMapping, BridgePlugin, TokenUtilizationStrategyResult, UnifiedBalanceResult } from "../../types";
import { MultichainClient } from "../chains.service";
import { MultichainAccount } from "../../accounts/account.service";
export declare class TokenUtilizationStrategy {
    steps: TokenUtilizationStrategyItems;
    tokenMapping: MultichainTokenMapping;
    chainRpcsInfo: ChainRpcInfo[];
    account: MultichainAccount;
    destinationChainBalance: bigint;
    destinationChainId: number;
    totalAmount: bigint;
    constructor(steps: TokenUtilizationStrategyItems, tokenMapping: MultichainTokenMapping, chainRpcsInfo: ChainRpcInfo[], account: MultichainAccount, destinationChainBalance: bigint, destinationChainId: number, totalAmount: bigint);
    encode(encodeSingleBridgeData: BridgePlugin): Promise<TokenUtilizationStrategyResult>;
}
export declare function prepareStrategy({ tokenMapping, client, amount, account, destinationChainId, unifiedBalance, }: {
    tokenMapping: MultichainTokenMapping;
    client: MultichainClient;
    amount: bigint;
    account: MultichainAccount;
    destinationChainId: number;
    unifiedBalance?: UnifiedBalanceResult;
}): Promise<TokenUtilizationStrategy>;
export declare function encodeBridgingOps({ tokenMapping, client, amount, account, destinationChainId, bridgePlugin, unifiedBalance, }: {
    tokenMapping: MultichainTokenMapping;
    client: MultichainClient;
    amount: bigint;
    account: MultichainAccount;
    destinationChainId: number;
    bridgePlugin: BridgePlugin;
    unifiedBalance?: UnifiedBalanceResult;
}): Promise<TokenUtilizationStrategyResult>;
export declare function buildBridgingEncoder(encoder: BridgePlugin): BridgePlugin;
//# sourceMappingURL=token-utilization-strategy.service.d.ts.map