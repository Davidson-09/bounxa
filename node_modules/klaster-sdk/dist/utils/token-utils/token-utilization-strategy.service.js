var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { getTokenAddressForChainId } from "../token-mapping.service";
function calculateTokenUtilizationStrategy(sortedBalances, amount) {
    var remainingAmount = amount;
    var result = [];
    for (var _i = 0, sortedBalances_1 = sortedBalances; _i < sortedBalances_1.length; _i++) {
        var _a = sortedBalances_1[_i], chainId = _a.chainId, balance = _a.balance;
        if (remainingAmount <= BigInt(0))
            break;
        if (balance > BigInt(0)) {
            var amountToUse = balance >= remainingAmount ? remainingAmount : balance;
            result.push({ chainId: chainId, amount: amountToUse });
            remainingAmount -= amountToUse;
        }
    }
    if (remainingAmount > BigInt(0)) {
        return null;
    }
    return result;
}
var TokenUtilizationStrategy = /** @class */ (function () {
    function TokenUtilizationStrategy(steps, tokenMapping, chainRpcsInfo, account, destinationChainBalance, destinationChainId, totalAmount) {
        this.steps = steps;
        this.tokenMapping = tokenMapping;
        this.chainRpcsInfo = chainRpcsInfo;
        this.account = account;
        this.destinationChainBalance = destinationChainBalance;
        this.destinationChainId = destinationChainId;
        this.totalAmount = totalAmount;
    }
    TokenUtilizationStrategy.prototype.encode = function (encodeSingleBridgeData) {
        return __awaiter(this, void 0, void 0, function () {
            var destinationToken, bridgingTxs, totalOuputFromEncodedTxs;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.steps) {
                            throw Error("Token strategy is null. This indicates that there is no feasible strategy to execute your \n        desired multi-bridge action. Most likely, this is caused by the user not having enough funds.");
                        }
                        // If destination chain has enough balance, don't calculate any bridging strategies
                        if (this.destinationChainBalance > this.totalAmount) {
                            return [2 /*return*/, {
                                    steps: [],
                                    totalReceivedOnDestination: this.totalAmount,
                                }];
                        }
                        destinationToken = getTokenAddressForChainId(this.tokenMapping, this.destinationChainId);
                        if (!destinationToken) {
                            throw new Error("Token mapping doesn't contain token on chainId: ".concat(this.destinationChainId));
                        }
                        return [4 /*yield*/, Promise.all(this.steps
                                // No need for bridging if the origin and destination chains are the same
                                .filter(function (_a) {
                                var chainId = _a.chainId, amount = _a.amount;
                                return chainId !== _this.destinationChainId;
                            })
                                .map(function (_a) { return __awaiter(_this, [_a], void 0, function (_b) {
                                var sourceToken;
                                var chainId = _b.chainId, amount = _b.amount;
                                return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            sourceToken = getTokenAddressForChainId(this.tokenMapping, chainId);
                                            if (!sourceToken) {
                                                throw new Error("Token mapping doesn't contain token on chainId: ".concat(this.destinationChainId));
                                            }
                                            return [4 /*yield*/, encodeSingleBridgeData({
                                                    sourceToken: sourceToken,
                                                    destinationToken: destinationToken,
                                                    sourceChainId: chainId,
                                                    destinationChainId: this.destinationChainId,
                                                    amount: amount,
                                                    account: this.account,
                                                })];
                                        case 1: return [2 /*return*/, _c.sent()];
                                    }
                                });
                            }); }))];
                    case 1:
                        bridgingTxs = _a.sent();
                        totalOuputFromEncodedTxs = bridgingTxs.length === 0
                            ? BigInt(0)
                            : bridgingTxs
                                .map(function (x) {
                                var _a;
                                return (_a = x.receivedOnDestination) !== null && _a !== void 0 ? _a : BigInt(0);
                            })
                                .reduce(function (curr, acc) {
                                return curr + acc;
                            });
                        return [2 /*return*/, {
                                steps: bridgingTxs.map(function (x) { return x.txBatch; }),
                                totalReceivedOnDestination: totalOuputFromEncodedTxs,
                            }];
                }
            });
        });
    };
    return TokenUtilizationStrategy;
}());
export { TokenUtilizationStrategy };
export function prepareStrategy(_a) {
    return __awaiter(this, arguments, void 0, function (_b) {
        var balance, _c, balances, destChainBalance, nonDestChainBalances, sortedBalances, tokenUtilizationSteps;
        var tokenMapping = _b.tokenMapping, client = _b.client, amount = _b.amount, account = _b.account, destinationChainId = _b.destinationChainId, unifiedBalance = _b.unifiedBalance;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!(unifiedBalance !== null && unifiedBalance !== void 0)) return [3 /*break*/, 1];
                    _c = unifiedBalance;
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, client.getUnifiedErc20Balance({
                        tokenMapping: tokenMapping,
                        account: account,
                    })];
                case 2:
                    _c = (_d.sent());
                    _d.label = 3;
                case 3:
                    balance = _c;
                    balances = balance.breakdown;
                    if (amount < 0) {
                        throw Error("Expected destinationamount for encoding bridigng actions can't be negative. Got ".concat(amount));
                    }
                    destChainBalance = balances.find(function (balance) { return balance.chainId === destinationChainId; });
                    if (!destChainBalance) {
                        throw new Error("Dest chain (chainId: ".concat(destinationChainId, ") balance is undefined.\n      Available balances: ").concat(balances.map(function (x) { return "[".concat(x.chainId, ", ").concat(x.amount, "]"); })));
                    }
                    nonDestChainBalances = balances.filter(function (balance) { return balance.chainId !== destinationChainId; });
                    sortedBalances = nonDestChainBalances.sort(function (a, b) {
                        return a.amount > b.amount ? -1 : 1;
                    });
                    tokenUtilizationSteps = calculateTokenUtilizationStrategy(sortedBalances.map(function (signleBalance) {
                        return {
                            balance: signleBalance.amount,
                            chainId: signleBalance.chainId,
                            decimals: balance.decimals,
                        };
                    }), amount - destChainBalance.amount);
                    return [2 /*return*/, new TokenUtilizationStrategy(tokenUtilizationSteps, tokenMapping, client.chainsRpcInfo, account, destChainBalance.amount, destChainBalance.chainId, amount)];
            }
        });
    });
}
export function encodeBridgingOps(_a) {
    return __awaiter(this, arguments, void 0, function (_b) {
        var strategy;
        var tokenMapping = _b.tokenMapping, client = _b.client, amount = _b.amount, account = _b.account, destinationChainId = _b.destinationChainId, bridgePlugin = _b.bridgePlugin, unifiedBalance = _b.unifiedBalance;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, prepareStrategy({
                        tokenMapping: tokenMapping,
                        client: client,
                        amount: amount,
                        account: account,
                        destinationChainId: destinationChainId,
                        unifiedBalance: unifiedBalance,
                    })];
                case 1:
                    strategy = _c.sent();
                    return [4 /*yield*/, strategy.encode(bridgePlugin)];
                case 2: return [2 /*return*/, _c.sent()];
            }
        });
    });
}
export function buildBridgingEncoder(encoder) {
    return encoder;
}
//# sourceMappingURL=token-utilization-strategy.service.js.map