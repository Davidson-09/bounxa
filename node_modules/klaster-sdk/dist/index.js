var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { KlasterNodeService } from "./node.service";
import { encodeSmartAccountCall } from "./utils/encoding.service";
import { SaltUtil } from "./utils/salt.service";
import { MultichainAccount } from "./accounts/account.service";
import { resolveToken } from "./utils/token-utils/token-resolver.service";
export * from "./types";
export * from "./utils/encoding.service";
export * from "./utils/itx.service";
export * from "./utils/salt.service";
export * from "./utils/token-utils/token-resolver.service";
export * from "./utils/token-utils/token-utilization-strategy.service";
export * from "./utils/token-utils/erc20-encoder.service";
export * from "./utils/constants/node-url.constants";
export * from "./utils/chains.service";
export * from "./utils/token-mapping.service";
export * from "./utils/constants/common-tokens.constants";
export * from './accounts/account.service';
export * from './accounts/account-vendors/biconomy.account';
export * from './accounts/account-vendors/safe.account';
export function initKlaster(config) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, KlasterSDK.init(config)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
var KlasterSDK = /** @class */ (function () {
    function KlasterSDK(config) {
        this.activeAccountSalt = SaltUtil.firstAccount();
        this.nodeService = new KlasterNodeService(config.nodeUrl);
        this.accountInitData = config.accountInitData;
    }
    KlasterSDK.init = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var sdk;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sdk = new KlasterSDK(config);
                        return [4 /*yield*/, sdk.initMultichainAccount()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, sdk];
                }
            });
        });
    };
    KlasterSDK.prototype.initMultichainAccount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var accountData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.nodeService.getWallet(this.accountInitData.accountProviderId, this.accountInitData.encodeAccountCreationFactoryData())];
                    case 1:
                        accountData = _a.sent();
                        this.account = new MultichainAccount(accountData.multichainAccount, this.accountInitData);
                        return [2 /*return*/];
                }
            });
        });
    };
    KlasterSDK.prototype.getQuote = function (itx) {
        return __awaiter(this, void 0, void 0, function () {
            var batches, userOps;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        batches = itx.steps;
                        if (batches.length === 0) {
                            throw Error("An iTx cannot have an empty batches array.");
                        }
                        userOps = batches.map(function (batch) {
                            var address = _this.account.getAddress(batch.chainId);
                            if (!address) {
                                throw Error("Smart contract account not avaialble on chain ".concat(batch.chainId, ". Account data: ").concat(_this.accountInitData));
                            }
                            return encodeSmartAccountCall(batch.chainId, batch.txs);
                        });
                        return [4 /*yield*/, this.nodeService.getQuote(this.account, userOps, itx.feeTx)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    KlasterSDK.prototype.encodePaymentFee = function (chainId, token) {
        var tokenInfo = resolveToken(token, chainId);
        return {
            chainId: chainId,
            token: tokenInfo.address
        };
    };
    KlasterSDK.prototype.execute = function (response, signedHash) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.nodeService.executeTx(response, signedHash)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    KlasterSDK.prototype.autoExecute = function (itx, signHash) {
        return __awaiter(this, void 0, void 0, function () {
            var quote, signedHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getQuote(itx)];
                    case 1:
                        quote = _a.sent();
                        return [4 /*yield*/, signHash(quote.itxHash)];
                    case 2:
                        signedHash = _a.sent();
                        return [4 /*yield*/, this.execute(quote, signedHash)];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return KlasterSDK;
}());
export { KlasterSDK };
//# sourceMappingURL=index.js.map