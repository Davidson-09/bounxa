"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionHistory = exports.getConnections = exports.getGasRecommendation = exports.getTokens = exports.getTools = exports.getStepTransaction = exports.getRoutes = exports.getChains = exports.getStatus = exports.getContractCallsQuote = exports.getQuote = exports.getToken = void 0;
const types_1 = require("@lifi/types");
const config_js_1 = require("../config.js");
const errors_js_1 = require("../errors/errors.js");
const SDKError_js_1 = require("../errors/SDKError.js");
const request_js_1 = require("../request.js");
const typeguards_js_1 = require("../typeguards.js");
const getToken = async (chain, token, options) => {
    if (!chain) {
        throw new SDKError_js_1.SDKError(new errors_js_1.ValidationError('Required parameter "chain" is missing.'));
    }
    if (!token) {
        throw new SDKError_js_1.SDKError(new errors_js_1.ValidationError('Required parameter "token" is missing.'));
    }
    return await (0, request_js_1.request)(`${config_js_1.config.get().apiUrl}/token?${new URLSearchParams({
        chain,
        token,
    })}`, {
        signal: options?.signal,
    });
};
exports.getToken = getToken;
const getQuote = async (params, options) => {
    const requiredParameters = [
        'fromChain',
        'fromToken',
        'fromAddress',
        'fromAmount',
        'toChain',
        'toToken',
    ];
    requiredParameters.forEach((requiredParameter) => {
        if (!params[requiredParameter]) {
            throw new SDKError_js_1.SDKError(new errors_js_1.ValidationError(`Required parameter "${requiredParameter}" is missing.`));
        }
    });
    const _config = config_js_1.config.get();
    params.integrator ??= _config.integrator;
    params.order ??= _config.routeOptions?.order;
    params.slippage ??= _config.routeOptions?.slippage;
    params.referrer ??= _config.routeOptions?.referrer;
    params.fee ??= _config.routeOptions?.fee;
    params.allowBridges ??= _config.routeOptions?.bridges?.allow;
    params.denyBridges ??= _config.routeOptions?.bridges?.deny;
    params.preferBridges ??= _config.routeOptions?.bridges?.prefer;
    params.allowExchanges ??= _config.routeOptions?.exchanges?.allow;
    params.denyExchanges ??= _config.routeOptions?.exchanges?.deny;
    params.preferExchanges ??= _config.routeOptions?.exchanges?.prefer;
    Object.keys(params).forEach((key) => !params[key] &&
        delete params[key]);
    return await (0, request_js_1.request)(`${_config.apiUrl}/quote?${new URLSearchParams(params)}`, {
        signal: options?.signal,
    });
};
exports.getQuote = getQuote;
const getContractCallsQuote = async (params, options) => {
    const requiredParameters = [
        'fromChain',
        'fromToken',
        'fromAddress',
        'toChain',
        'toToken',
        'contractCalls',
    ];
    requiredParameters.forEach((requiredParameter) => {
        if (!params[requiredParameter]) {
            throw new SDKError_js_1.SDKError(new errors_js_1.ValidationError(`Required parameter "${requiredParameter}" is missing.`));
        }
    });
    if (!(0, types_1.isContractCallsRequestWithFromAmount)(params) &&
        !(0, types_1.isContractCallsRequestWithToAmount)(params)) {
        throw new SDKError_js_1.SDKError(new errors_js_1.ValidationError(`Required parameter "fromAmount" or "toAmount" is missing.`));
    }
    const _config = config_js_1.config.get();
    params.integrator ??= _config.integrator;
    params.slippage ??= _config.routeOptions?.slippage;
    params.referrer ??= _config.routeOptions?.referrer;
    params.fee ??= _config.routeOptions?.fee;
    params.allowBridges ??= _config.routeOptions?.bridges?.allow;
    params.denyBridges ??= _config.routeOptions?.bridges?.deny;
    params.preferBridges ??= _config.routeOptions?.bridges?.prefer;
    params.allowExchanges ??= _config.routeOptions?.exchanges?.allow;
    params.denyExchanges ??= _config.routeOptions?.exchanges?.deny;
    params.preferExchanges ??= _config.routeOptions?.exchanges?.prefer;
    return await (0, request_js_1.request)(`${_config.apiUrl}/quote/contractCalls`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(params),
        signal: options?.signal,
    });
};
exports.getContractCallsQuote = getContractCallsQuote;
const getStatus = async (params, options) => {
    if (!params.txHash) {
        throw new SDKError_js_1.SDKError(new errors_js_1.ValidationError('Required parameter "txHash" is missing.'));
    }
    const queryParams = new URLSearchParams(params);
    return await (0, request_js_1.request)(`${config_js_1.config.get().apiUrl}/status?${queryParams}`, {
        signal: options?.signal,
    });
};
exports.getStatus = getStatus;
const getChains = async (params, options) => {
    if (params) {
        Object.keys(params).forEach((key) => !params[key] &&
            delete params[key]);
    }
    const response = await (0, request_js_1.request)(`${config_js_1.config.get().apiUrl}/chains?${new URLSearchParams(params)}`, {
        signal: options?.signal,
    });
    return response.chains;
};
exports.getChains = getChains;
const getRoutes = async (params, options) => {
    if (!(0, typeguards_js_1.isRoutesRequest)(params)) {
        throw new SDKError_js_1.SDKError(new errors_js_1.ValidationError('Invalid routes request.'));
    }
    const _config = config_js_1.config.get();
    params.options = {
        integrator: _config.integrator,
        ..._config.routeOptions,
        ...params.options,
    };
    return await (0, request_js_1.request)(`${_config.apiUrl}/advanced/routes`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(params),
        signal: options?.signal,
    });
};
exports.getRoutes = getRoutes;
const getStepTransaction = async (step, options) => {
    if (!(0, typeguards_js_1.isStep)(step)) {
        console.warn('SDK Validation: Invalid Step', step);
    }
    return await (0, request_js_1.request)(`${config_js_1.config.get().apiUrl}/advanced/stepTransaction`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(step),
        signal: options?.signal,
    });
};
exports.getStepTransaction = getStepTransaction;
const getTools = async (params, options) => {
    if (params) {
        Object.keys(params).forEach((key) => !params[key] &&
            delete params[key]);
    }
    return await (0, request_js_1.request)(`${config_js_1.config.get().apiUrl}/tools?${new URLSearchParams(params)}`, {
        signal: options?.signal,
    });
};
exports.getTools = getTools;
const getTokens = async (params, options) => {
    if (params) {
        Object.keys(params).forEach((key) => !params[key] &&
            delete params[key]);
    }
    return await (0, request_js_1.request)(`${config_js_1.config.get().apiUrl}/tokens?${new URLSearchParams(params)}`, {
        signal: options?.signal,
    });
};
exports.getTokens = getTokens;
const getGasRecommendation = async (params, options) => {
    if (!params.chainId) {
        throw new SDKError_js_1.SDKError(new errors_js_1.ValidationError('Required parameter "chainId" is missing.'));
    }
    const url = new URL(`${config_js_1.config.get().apiUrl}/gas/suggestion/${params.chainId}`);
    if (params.fromChain) {
        url.searchParams.append('fromChain', params.fromChain);
    }
    if (params.fromToken) {
        url.searchParams.append('fromToken', params.fromToken);
    }
    return await (0, request_js_1.request)(url.toString(), {
        signal: options?.signal,
    });
};
exports.getGasRecommendation = getGasRecommendation;
const getConnections = async (connectionRequest, options) => {
    const url = new URL(`${config_js_1.config.get().apiUrl}/connections`);
    const { fromChain, fromToken, toChain, toToken } = connectionRequest;
    if (fromChain) {
        url.searchParams.append('fromChain', fromChain);
    }
    if (fromToken) {
        url.searchParams.append('fromToken', fromToken);
    }
    if (toChain) {
        url.searchParams.append('toChain', toChain);
    }
    if (toToken) {
        url.searchParams.append('toToken', toToken);
    }
    const connectionRequestArrayParams = [
        'allowBridges',
        'denyBridges',
        'preferBridges',
        'allowExchanges',
        'denyExchanges',
        'preferExchanges',
    ];
    connectionRequestArrayParams.forEach((parameter) => {
        const connectionRequestArrayParam = connectionRequest[parameter];
        if (connectionRequestArrayParam?.length) {
            connectionRequestArrayParam?.forEach((value) => {
                url.searchParams.append(parameter, value);
            });
        }
    });
    return await (0, request_js_1.request)(url, options);
};
exports.getConnections = getConnections;
const getTransactionHistory = async ({ wallet, status, fromTimestamp, toTimestamp }, options) => {
    if (!wallet) {
        throw new SDKError_js_1.SDKError(new errors_js_1.ValidationError('Required parameter "wallet" is missing.'));
    }
    const _config = config_js_1.config.get();
    const url = new URL(`${_config.apiUrl}/analytics/transfers`);
    url.searchParams.append('integrator', _config.integrator);
    url.searchParams.append('wallet', wallet);
    if (status) {
        url.searchParams.append('status', status);
    }
    if (fromTimestamp) {
        url.searchParams.append('fromTimestamp', fromTimestamp.toString());
    }
    if (toTimestamp) {
        url.searchParams.append('toTimestamp', toTimestamp.toString());
    }
    return await (0, request_js_1.request)(url, options);
};
exports.getTransactionHistory = getTransactionHistory;
//# sourceMappingURL=api.js.map